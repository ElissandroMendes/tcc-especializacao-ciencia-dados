version: "2.2"
services:
  jobmanager:
    build:
      context: .
      dockerfile: flink/Dockerfile
    image: pyflink/pyflink:1.13.1-scala_2.12
    container_name: jobmanager
    networks:
      - broker-kafka
    volumes:
      - ./reader:/opt/sensors
    hostname: "jobmanager"
    expose:
      - "6123"
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager

  taskmanager:
    image: pyflink/pyflink:1.13.1-scala_2.12
    container_name: taskmanager
    networks:
      - broker-kafka
    volumes:
      - .:/opt/sensors
    expose:
      - "6121"
      - "6122"
    depends_on:
      - jobmanager
    command: taskmanager
    links:
      - jobmanager:jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper
    networks:
      - broker-kafka
    ports:
      - 2181:2181
  kafka:
    image: wurstmeister/kafka:2.12-2.2.1
    container_name: kafka
    networks:
      - broker-kafka
    ports:
      - 9092:9092
    depends_on:
      - zookeeper
    environment:
      HOSTNAME_COMMAND: "route -n | awk '/UG[ \t]/{print $$2}'"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "sensor-data:1:1"
      KAFKA_BROKER_ID: 1

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    networks:
      - broker-kafka
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

  db:
    image: mysql/mysql-server:5.7
    container_name: db
    networks:
      - broker-kafka
    ports:
      - 3306:3306
    volumes:
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/data:/var/lib/mysql
    environment:
      MYSQL_ROOT_HOST: 192.%
      MYSQL_ROOT_PASSWORD: tcc-infra

  generator:
    build: generator
    image: generator:1.0
    container_name: generator
    networks:
      - broker-kafka
    depends_on:
      - kafka

  dash:
    build:
      context: .
      dockerfile: dashboard/Dockerfile.dash
    container_name: dash
    command: python app.py
    networks:
      - broker-kafka
    volumes:
      - ./dashboard:/code
    ports:
      - "8080:8080"
    depends_on:
      - db

networks:
  broker-kafka:
    driver: bridge
